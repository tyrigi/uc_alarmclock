
rotary_sel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000690  00000724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000690  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800112  00800112  00000736  2**0
                  ALLOC
  3 .stab         00001140  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dd1  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002649  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000265c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e9       	ldi	r30, 0x90	; 144
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 33       	cpi	r26, 0x31	; 49
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <main>
  c6:	0c 94 46 03 	jmp	0x68c	; 0x68c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
    0b10001110, // F
    0b11111111, // Blank
};

void spi_init(void){
    DDRB |= 0x07;
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	87 bb       	out	0x17, r24	; 23
    SPCR |= (1<<SPE) | (1<<MSTR);
  d4:	8d b1       	in	r24, 0x0d	; 13
  d6:	80 65       	ori	r24, 0x50	; 80
  d8:	8d b9       	out	0x0d, r24	; 13
    SPSR |= (1<<SPI2X);
  da:	70 9a       	sbi	0x0e, 0	; 14
  dc:	08 95       	ret

000000de <spi_read>:
}

uint8_t spi_read(void){
    PORTC &= ~(1<<PC1);
  de:	a9 98       	cbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	85 e3       	ldi	r24, 0x35	; 53
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <spi_read+0x4>
  e6:	00 00       	nop
    _delay_us(10);
    PORTC |= (1<<PC1);
  e8:	a9 9a       	sbi	0x15, 1	; 21
    SPDR = 0x00;
  ea:	1f b8       	out	0x0f, r1	; 15
    while (bit_is_clear(SPSR,SPIF)){}
  ec:	77 9b       	sbis	0x0e, 7	; 14
  ee:	fe cf       	rjmp	.-4      	; 0xec <spi_read+0xe>
    return(SPDR);
  f0:	8f b1       	in	r24, 0x0f	; 15
}
  f2:	08 95       	ret

000000f4 <serial_update>:

uint8_t serial_update(uint8_t value){
    // Write an 8-bit value to the bar graph and return the encoder values
    PORTC &= ~((1<<PC2)|(1<<PC1));
  f4:	95 b3       	in	r25, 0x15	; 21
  f6:	99 7f       	andi	r25, 0xF9	; 249
  f8:	95 bb       	out	0x15, r25	; 21
  fa:	95 e0       	ldi	r25, 0x05	; 5
  fc:	9a 95       	dec	r25
  fe:	f1 f7       	brne	.-4      	; 0xfc <serial_update+0x8>
 100:	00 00       	nop
    _delay_us(1);
    PORTC |= (1<<PC1);
 102:	a9 9a       	sbi	0x15, 1	; 21
    SPDR = value;
 104:	8f b9       	out	0x0f, r24	; 15
    while (bit_is_clear(SPSR,SPIF)){}
 106:	77 9b       	sbis	0x0e, 7	; 14
 108:	fe cf       	rjmp	.-4      	; 0x106 <serial_update+0x12>
    PORTB |= (1<<PB0);
 10a:	c0 9a       	sbi	0x18, 0	; 24
    PORTB &= ~(1<<PB0);
 10c:	c0 98       	cbi	0x18, 0	; 24
    PORTC |= (1<<PC2);
 10e:	aa 9a       	sbi	0x15, 2	; 21
    return(SPDR);
 110:	8f b1       	in	r24, 0x0f	; 15
}
 112:	08 95       	ret

00000114 <chk_buttons>:

uint8_t chk_buttons(uint8_t button) {
 114:	48 2f       	mov	r20, r24

    // Button states
    static uint16_t state[] = {0, 0, 0, 0, 0, 0, 0, 0};

    // Check the button's state
    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000;
 116:	e8 2f       	mov	r30, r24
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	99 b3       	in	r25, 0x19	; 25
 11c:	ee 0f       	add	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	ef 5d       	subi	r30, 0xDF	; 223
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	20 81       	ld	r18, Z
 126:	31 81       	ldd	r19, Z+1	; 0x01
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	30 6e       	ori	r19, 0xE0	; 224
 12e:	89 2f       	mov	r24, r25
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <chk_buttons+0x24>
 134:	95 95       	asr	r25
 136:	87 95       	ror	r24
 138:	4a 95       	dec	r20
 13a:	e2 f7       	brpl	.-8      	; 0x134 <chk_buttons+0x20>
 13c:	81 70       	andi	r24, 0x01	; 1
 13e:	99 27       	eor	r25, r25
 140:	28 2b       	or	r18, r24
 142:	39 2b       	or	r19, r25
 144:	31 83       	std	Z+1, r19	; 0x01
 146:	20 83       	st	Z, r18

    // If the button has been pressed the last 12 times it has been checked, return true
    if (state[button] == 0xF000){return 1;}
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	21 15       	cp	r18, r1
 14c:	30 4f       	sbci	r19, 0xF0	; 240
 14e:	09 f0       	breq	.+2      	; 0x152 <chk_buttons+0x3e>
 150:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
}
 152:	08 95       	ret

00000154 <segsum>:
    uint8_t tous = 0;
    uint8_t huns = 0;
    uint8_t tens = 0;
    uint8_t ones = 0;

    while (sum >= 1000) {
 154:	88 3e       	cpi	r24, 0xE8	; 232
 156:	23 e0       	ldi	r18, 0x03	; 3
 158:	92 07       	cpc	r25, r18
 15a:	90 f1       	brcs	.+100    	; 0x1c0 <segsum+0x6c>
 15c:	20 e0       	ldi	r18, 0x00	; 0
        sum -= 1000;
 15e:	88 5e       	subi	r24, 0xE8	; 232
 160:	93 40       	sbci	r25, 0x03	; 3
        tous++;
 162:	2f 5f       	subi	r18, 0xFF	; 255
    uint8_t tous = 0;
    uint8_t huns = 0;
    uint8_t tens = 0;
    uint8_t ones = 0;

    while (sum >= 1000) {
 164:	88 3e       	cpi	r24, 0xE8	; 232
 166:	33 e0       	ldi	r19, 0x03	; 3
 168:	93 07       	cpc	r25, r19
 16a:	c8 f7       	brcc	.-14     	; 0x15e <segsum+0xa>
        sum -= 1000;
        tous++;
    }
    while (sum >= 100) {
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	84 36       	cpi	r24, 0x64	; 100
 170:	91 05       	cpc	r25, r1
 172:	30 f0       	brcs	.+12     	; 0x180 <segsum+0x2c>
        sum -= 100;
 174:	84 56       	subi	r24, 0x64	; 100
 176:	91 09       	sbc	r25, r1
        huns++;
 178:	3f 5f       	subi	r19, 0xFF	; 255

    while (sum >= 1000) {
        sum -= 1000;
        tous++;
    }
    while (sum >= 100) {
 17a:	84 36       	cpi	r24, 0x64	; 100
 17c:	91 05       	cpc	r25, r1
 17e:	d0 f7       	brcc	.-12     	; 0x174 <segsum+0x20>
        sum -= 100;
        huns++;
    }
    while (sum >= 10) {
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	8a 30       	cpi	r24, 0x0A	; 10
 184:	91 05       	cpc	r25, r1
 186:	28 f0       	brcs	.+10     	; 0x192 <segsum+0x3e>
        sum -= 10;
 188:	0a 97       	sbiw	r24, 0x0a	; 10
        tens++;
 18a:	4f 5f       	subi	r20, 0xFF	; 255
    }
    while (sum >= 100) {
        sum -= 100;
        huns++;
    }
    while (sum >= 10) {
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	91 05       	cpc	r25, r1
 190:	d8 f7       	brcc	.-10     	; 0x188 <segsum+0x34>
        sum -= 10;
        tens++;
    }
    while (sum >= 1) {
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	b9 f0       	breq	.+46     	; 0x1c4 <segsum+0x70>
        sum -= 1;
        ones++;
    }

    // Leading zero suppression. Note that '0x10' is blank
    if (tous == 0){
 196:	21 11       	cpse	r18, r1
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <segsum+0x54>
        tous = 0x10;
        if (huns == 0){
 19a:	31 11       	cpse	r19, r1
 19c:	0f c0       	rjmp	.+30     	; 0x1bc <segsum+0x68>
            huns = 0x10;
            if (tens == 0){tens = 0x10;}
 19e:	41 11       	cpse	r20, r1
 1a0:	0c c0       	rjmp	.+24     	; 0x1ba <segsum+0x66>
 1a2:	40 e1       	ldi	r20, 0x10	; 16

    // Leading zero suppression. Note that '0x10' is blank
    if (tous == 0){
        tous = 0x10;
        if (huns == 0){
            huns = 0x10;
 1a4:	30 e1       	ldi	r19, 0x10	; 16
        ones++;
    }

    // Leading zero suppression. Note that '0x10' is blank
    if (tous == 0){
        tous = 0x10;
 1a6:	20 e1       	ldi	r18, 0x10	; 16
        if (huns == 0){
            huns = 0x10;
            if (tens == 0){tens = 0x10;}
        }
    }
    segment_data[4] = tous;
 1a8:	20 93 16 01 	sts	0x0116, r18
    segment_data[3] = huns;
 1ac:	30 93 15 01 	sts	0x0115, r19
    segment_data[1] = tens;
 1b0:	40 93 13 01 	sts	0x0113, r20
    segment_data[0] = ones;
 1b4:	80 93 12 01 	sts	0x0112, r24
 1b8:	08 95       	ret

    // Leading zero suppression. Note that '0x10' is blank
    if (tous == 0){
        tous = 0x10;
        if (huns == 0){
            huns = 0x10;
 1ba:	30 e1       	ldi	r19, 0x10	; 16
        ones++;
    }

    // Leading zero suppression. Note that '0x10' is blank
    if (tous == 0){
        tous = 0x10;
 1bc:	20 e1       	ldi	r18, 0x10	; 16
 1be:	f4 cf       	rjmp	.-24     	; 0x1a8 <segsum+0x54>
}

void segsum(uint16_t sum){
    // convert the 16-bit count into the base-10 display code

    uint8_t tous = 0;
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	d4 cf       	rjmp	.-88     	; 0x16c <segsum+0x18>
    }
    while (sum >= 10) {
        sum -= 10;
        tens++;
    }
    while (sum >= 1) {
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	e7 cf       	rjmp	.-50     	; 0x196 <segsum+0x42>

000001c8 <decode_enc>:
    static uint8_t encB_prev;
    static uint8_t encA_cw;
    static uint8_t encA_ccw;
    static uint8_t encB_cw;
    static uint8_t encB_ccw;
        if (encoders & 0x1){
 1c8:	80 ff       	sbrs	r24, 0
 1ca:	46 c0       	rjmp	.+140    	; 0x258 <decode_enc+0x90>
            if(encoders & 0x2){encA_state=0x3;}
 1cc:	81 ff       	sbrs	r24, 1
 1ce:	6a c0       	rjmp	.+212    	; 0x2a4 <decode_enc+0xdc>
 1d0:	93 e0       	ldi	r25, 0x03	; 3
 1d2:	90 93 20 01 	sts	0x0120, r25
        if (!(encoders & 0x1)){
            if(encoders & 0x2){encA_state=0x2;}
            if(!(encoders & 0x2)){encA_state=0x0;}
        }
        // Check for bit 3 set
        if (encoders & 0x4){
 1d6:	82 fd       	sbrc	r24, 2
 1d8:	47 c0       	rjmp	.+142    	; 0x268 <decode_enc+0xa0>
            if(encoders & 0x8){encB_state=0x3;}
            if(!(encoders & 0x8)){encB_state=0x1;}
        }
        // Check for bit 3 clear
        if (!(encoders & 0x4)){
            if(encoders & 0x8){encB_state=0x2;}
 1da:	83 fd       	sbrc	r24, 3
 1dc:	c0 c0       	rjmp	.+384    	; 0x35e <decode_enc+0x196>
            if(!(encoders & 0x8)){encB_state=0x0;}
 1de:	10 92 1f 01 	sts	0x011F, r1
        }

        switch (encA_state){
 1e2:	92 30       	cpi	r25, 0x02	; 2
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <decode_enc+0x20>
 1e6:	48 c0       	rjmp	.+144    	; 0x278 <decode_enc+0xb0>
 1e8:	93 30       	cpi	r25, 0x03	; 3
 1ea:	09 f4       	brne	.+2      	; 0x1ee <decode_enc+0x26>
 1ec:	67 c0       	rjmp	.+206    	; 0x2bc <decode_enc+0xf4>
                if (encA_prev == 0x1){encA_ccw++;}
                if (encA_prev == 0x2){encA_cw++;}
                encA_prev = 0x0;
                break;
            case 0x1:
                if (encA_prev == 0x0){encA_cw++;}
 1ee:	80 91 1e 01 	lds	r24, 0x011E
        if (!(encoders & 0x4)){
            if(encoders & 0x8){encB_state=0x2;}
            if(!(encoders & 0x8)){encB_state=0x0;}
        }

        switch (encA_state){
 1f2:	91 30       	cpi	r25, 0x01	; 1
 1f4:	09 f4       	brne	.+2      	; 0x1f8 <decode_enc+0x30>
 1f6:	ba c0       	rjmp	.+372    	; 0x36c <decode_enc+0x1a4>
            case 0x0:
                if (encA_prev == 0x1){encA_ccw++;}
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	09 f4       	brne	.+2      	; 0x1fe <decode_enc+0x36>
 1fc:	d6 c0       	rjmp	.+428    	; 0x3aa <decode_enc+0x1e2>
                if (encA_prev == 0x2){encA_cw++;}
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	09 f4       	brne	.+2      	; 0x204 <decode_enc+0x3c>
 202:	2e c1       	rjmp	.+604    	; 0x460 <decode_enc+0x298>
 204:	40 91 1d 01 	lds	r20, 0x011D
 208:	90 91 1c 01 	lds	r25, 0x011C
                encA_prev = 0x0;
 20c:	10 92 1e 01 	sts	0x011E, r1
                if (encA_prev == 0x2){encA_ccw++;}
                encA_prev = 0x3;
                break;
        }
        
        switch (encB_state){
 210:	80 91 1f 01 	lds	r24, 0x011F
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	09 f0       	breq	.+2      	; 0x21a <decode_enc+0x52>
 218:	67 c0       	rjmp	.+206    	; 0x2e8 <decode_enc+0x120>
                if (encB_prev == 0x1){encB_ccw++;}
                if (encB_prev == 0x2){encB_cw++;}
                encB_prev = 0x0;
                break;
            case 0x1:
                if (encB_prev == 0x0){encB_cw++;}
 21a:	80 91 1b 01 	lds	r24, 0x011B
 21e:	81 11       	cpse	r24, r1
 220:	05 c1       	rjmp	.+522    	; 0x42c <decode_enc+0x264>
 222:	30 91 19 01 	lds	r19, 0x0119
 226:	3f 5f       	subi	r19, 0xFF	; 255
 228:	30 93 19 01 	sts	0x0119, r19
 22c:	20 91 1a 01 	lds	r18, 0x011A
                if (encB_prev == 0x3){encB_ccw++;}
                encB_prev = 0x1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 1b 01 	sts	0x011B, r24
                if (encB_prev == 0x2){encB_ccw++;}
                encB_prev = 0x3;
                break;
        }

        if (encA_cw >= 0x4){
 236:	94 30       	cpi	r25, 0x04	; 4
 238:	08 f4       	brcc	.+2      	; 0x23c <decode_enc+0x74>
 23a:	66 c0       	rjmp	.+204    	; 0x308 <decode_enc+0x140>
            count+=jump;
 23c:	80 91 17 01 	lds	r24, 0x0117
 240:	90 91 18 01 	lds	r25, 0x0118
 244:	86 0f       	add	r24, r22
 246:	91 1d       	adc	r25, r1
            if (count > 1023){count -= 1024;}
 248:	81 15       	cp	r24, r1
 24a:	54 e0       	ldi	r21, 0x04	; 4
 24c:	95 07       	cpc	r25, r21
 24e:	08 f0       	brcs	.+2      	; 0x252 <decode_enc+0x8a>
 250:	94 50       	subi	r25, 0x04	; 4
            encA_cw = 0;
 252:	10 92 1c 01 	sts	0x011C, r1
 256:	5c c0       	rjmp	.+184    	; 0x310 <decode_enc+0x148>
            if(encoders & 0x2){encA_state=0x3;}
            if(!(encoders & 0x2)){encA_state=0x1;}
        }
        // Check for bit 1 clear
        if (!(encoders & 0x1)){
            if(encoders & 0x2){encA_state=0x2;}
 258:	98 2f       	mov	r25, r24
 25a:	92 70       	andi	r25, 0x02	; 2
 25c:	81 fd       	sbrc	r24, 1
 25e:	1e c0       	rjmp	.+60     	; 0x29c <decode_enc+0xd4>
            if(!(encoders & 0x2)){encA_state=0x0;}
 260:	10 92 20 01 	sts	0x0120, r1
        }
        // Check for bit 3 set
        if (encoders & 0x4){
 264:	82 ff       	sbrs	r24, 2
 266:	b9 cf       	rjmp	.-142    	; 0x1da <decode_enc+0x12>
            if(encoders & 0x8){encB_state=0x3;}
 268:	83 ff       	sbrs	r24, 3
 26a:	20 c0       	rjmp	.+64     	; 0x2ac <decode_enc+0xe4>
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	80 93 1f 01 	sts	0x011F, r24
        if (!(encoders & 0x4)){
            if(encoders & 0x8){encB_state=0x2;}
            if(!(encoders & 0x8)){encB_state=0x0;}
        }

        switch (encA_state){
 272:	92 30       	cpi	r25, 0x02	; 2
 274:	09 f0       	breq	.+2      	; 0x278 <decode_enc+0xb0>
 276:	b8 cf       	rjmp	.-144    	; 0x1e8 <decode_enc+0x20>
                if (encA_prev == 0x0){encA_cw++;}
                if (encA_prev == 0x3){encA_ccw++;}
                encA_prev = 0x1;
                break;
            case 0x2:
                if (encA_prev == 0x3){encA_cw++;}
 278:	80 91 1e 01 	lds	r24, 0x011E
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	09 f4       	brne	.+2      	; 0x282 <decode_enc+0xba>
 280:	8c c0       	rjmp	.+280    	; 0x39a <decode_enc+0x1d2>
                if (encA_prev == 0x0){encA_ccw++;}
 282:	40 91 1d 01 	lds	r20, 0x011D
 286:	81 11       	cpse	r24, r1
 288:	03 c0       	rjmp	.+6      	; 0x290 <decode_enc+0xc8>
 28a:	4f 5f       	subi	r20, 0xFF	; 255
 28c:	40 93 1d 01 	sts	0x011D, r20
 290:	90 91 1c 01 	lds	r25, 0x011C
                encA_prev = 0x2;
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	80 93 1e 01 	sts	0x011E, r24
                break;
 29a:	21 c0       	rjmp	.+66     	; 0x2de <decode_enc+0x116>
            if(encoders & 0x2){encA_state=0x3;}
            if(!(encoders & 0x2)){encA_state=0x1;}
        }
        // Check for bit 1 clear
        if (!(encoders & 0x1)){
            if(encoders & 0x2){encA_state=0x2;}
 29c:	92 e0       	ldi	r25, 0x02	; 2
 29e:	90 93 20 01 	sts	0x0120, r25
 2a2:	e0 cf       	rjmp	.-64     	; 0x264 <decode_enc+0x9c>
    static uint8_t encA_ccw;
    static uint8_t encB_cw;
    static uint8_t encB_ccw;
        if (encoders & 0x1){
            if(encoders & 0x2){encA_state=0x3;}
            if(!(encoders & 0x2)){encA_state=0x1;}
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	90 93 20 01 	sts	0x0120, r25
 2aa:	dc cf       	rjmp	.-72     	; 0x264 <decode_enc+0x9c>
            if(!(encoders & 0x2)){encA_state=0x0;}
        }
        // Check for bit 3 set
        if (encoders & 0x4){
            if(encoders & 0x8){encB_state=0x3;}
            if(!(encoders & 0x8)){encB_state=0x1;}
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 1f 01 	sts	0x011F, r24
        if (!(encoders & 0x4)){
            if(encoders & 0x8){encB_state=0x2;}
            if(!(encoders & 0x8)){encB_state=0x0;}
        }

        switch (encA_state){
 2b2:	92 30       	cpi	r25, 0x02	; 2
 2b4:	09 f3       	breq	.-62     	; 0x278 <decode_enc+0xb0>
 2b6:	93 30       	cpi	r25, 0x03	; 3
 2b8:	09 f0       	breq	.+2      	; 0x2bc <decode_enc+0xf4>
 2ba:	99 cf       	rjmp	.-206    	; 0x1ee <decode_enc+0x26>
                if (encA_prev == 0x3){encA_cw++;}
                if (encA_prev == 0x0){encA_ccw++;}
                encA_prev = 0x2;
                break;
            case 0x3:
                if (encA_prev == 0x1){encA_cw++;}
 2bc:	80 91 1e 01 	lds	r24, 0x011E
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <decode_enc+0xfe>
 2c4:	7a c0       	rjmp	.+244    	; 0x3ba <decode_enc+0x1f2>
                if (encA_prev == 0x2){encA_ccw++;}
 2c6:	40 91 1d 01 	lds	r20, 0x011D
 2ca:	82 30       	cpi	r24, 0x02	; 2
 2cc:	19 f4       	brne	.+6      	; 0x2d4 <decode_enc+0x10c>
 2ce:	4f 5f       	subi	r20, 0xFF	; 255
 2d0:	40 93 1d 01 	sts	0x011D, r20
 2d4:	90 91 1c 01 	lds	r25, 0x011C
                encA_prev = 0x3;
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	80 93 1e 01 	sts	0x011E, r24
                break;
        }
        
        switch (encB_state){
 2de:	80 91 1f 01 	lds	r24, 0x011F
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <decode_enc+0x120>
 2e6:	99 cf       	rjmp	.-206    	; 0x21a <decode_enc+0x52>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	08 f4       	brcc	.+2      	; 0x2ee <decode_enc+0x126>
 2ec:	8f c0       	rjmp	.+286    	; 0x40c <decode_enc+0x244>
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <decode_enc+0x12c>
 2f2:	7b c0       	rjmp	.+246    	; 0x3ea <decode_enc+0x222>
 2f4:	83 30       	cpi	r24, 0x03	; 3
 2f6:	09 f4       	brne	.+2      	; 0x2fa <decode_enc+0x132>
 2f8:	68 c0       	rjmp	.+208    	; 0x3ca <decode_enc+0x202>
 2fa:	30 91 19 01 	lds	r19, 0x0119
 2fe:	20 91 1a 01 	lds	r18, 0x011A
                if (encB_prev == 0x2){encB_ccw++;}
                encB_prev = 0x3;
                break;
        }

        if (encA_cw >= 0x4){
 302:	94 30       	cpi	r25, 0x04	; 4
 304:	08 f0       	brcs	.+2      	; 0x308 <decode_enc+0x140>
 306:	9a cf       	rjmp	.-204    	; 0x23c <decode_enc+0x74>
 308:	80 91 17 01 	lds	r24, 0x0117
 30c:	90 91 18 01 	lds	r25, 0x0118
            count+=jump;
            if (count > 1023){count -= 1024;}
            encA_cw = 0;
        }
        if (encA_ccw >= 0x4){
 310:	44 30       	cpi	r20, 0x04	; 4
 312:	48 f0       	brcs	.+18     	; 0x326 <decode_enc+0x15e>
            count-=jump;
 314:	86 1b       	sub	r24, r22
 316:	91 09       	sbc	r25, r1
            if (count > 1023){count -= 1024;}
 318:	81 15       	cp	r24, r1
 31a:	44 e0       	ldi	r20, 0x04	; 4
 31c:	94 07       	cpc	r25, r20
 31e:	08 f0       	brcs	.+2      	; 0x322 <decode_enc+0x15a>
 320:	94 50       	subi	r25, 0x04	; 4
            encA_ccw = 0;
 322:	10 92 1d 01 	sts	0x011D, r1
        }
        if (encB_cw >= 0x4){
 326:	34 30       	cpi	r19, 0x04	; 4
 328:	48 f0       	brcs	.+18     	; 0x33c <decode_enc+0x174>
            count+=jump;
 32a:	86 0f       	add	r24, r22
 32c:	91 1d       	adc	r25, r1
            if (count > 1023){count -= 1024;}
 32e:	81 15       	cp	r24, r1
 330:	54 e0       	ldi	r21, 0x04	; 4
 332:	95 07       	cpc	r25, r21
 334:	08 f0       	brcs	.+2      	; 0x338 <decode_enc+0x170>
 336:	94 50       	subi	r25, 0x04	; 4
            encB_cw = 0;
 338:	10 92 19 01 	sts	0x0119, r1
        }
        if (encB_ccw >= 0x4){
 33c:	24 30       	cpi	r18, 0x04	; 4
 33e:	48 f0       	brcs	.+18     	; 0x352 <decode_enc+0x18a>
            count-=jump;
 340:	86 1b       	sub	r24, r22
 342:	91 09       	sbc	r25, r1
            if (count > 1023){count -= 1024;}
 344:	81 15       	cp	r24, r1
 346:	24 e0       	ldi	r18, 0x04	; 4
 348:	92 07       	cpc	r25, r18
 34a:	08 f0       	brcs	.+2      	; 0x34e <decode_enc+0x186>
 34c:	94 50       	subi	r25, 0x04	; 4
            encB_ccw = 0;
 34e:	10 92 1a 01 	sts	0x011A, r1
        }
        count = count & 0x03FF;
 352:	93 70       	andi	r25, 0x03	; 3
 354:	90 93 18 01 	sts	0x0118, r25
 358:	80 93 17 01 	sts	0x0117, r24
 35c:	08 95       	ret
            if(encoders & 0x8){encB_state=0x3;}
            if(!(encoders & 0x8)){encB_state=0x1;}
        }
        // Check for bit 3 clear
        if (!(encoders & 0x4)){
            if(encoders & 0x8){encB_state=0x2;}
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	80 93 1f 01 	sts	0x011F, r24
            if(!(encoders & 0x8)){encB_state=0x0;}
        }

        switch (encA_state){
 364:	92 30       	cpi	r25, 0x02	; 2
 366:	09 f0       	breq	.+2      	; 0x36a <decode_enc+0x1a2>
 368:	3f cf       	rjmp	.-386    	; 0x1e8 <decode_enc+0x20>
 36a:	86 cf       	rjmp	.-244    	; 0x278 <decode_enc+0xb0>
                if (encA_prev == 0x1){encA_ccw++;}
                if (encA_prev == 0x2){encA_cw++;}
                encA_prev = 0x0;
                break;
            case 0x1:
                if (encA_prev == 0x0){encA_cw++;}
 36c:	88 23       	and	r24, r24
 36e:	69 f0       	breq	.+26     	; 0x38a <decode_enc+0x1c2>
                if (encA_prev == 0x3){encA_ccw++;}
 370:	40 91 1d 01 	lds	r20, 0x011D
 374:	83 30       	cpi	r24, 0x03	; 3
 376:	19 f4       	brne	.+6      	; 0x37e <decode_enc+0x1b6>
 378:	4f 5f       	subi	r20, 0xFF	; 255
 37a:	40 93 1d 01 	sts	0x011D, r20
 37e:	90 91 1c 01 	lds	r25, 0x011C
                encA_prev = 0x1;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 1e 01 	sts	0x011E, r24
                break;
 388:	aa cf       	rjmp	.-172    	; 0x2de <decode_enc+0x116>
                if (encA_prev == 0x1){encA_ccw++;}
                if (encA_prev == 0x2){encA_cw++;}
                encA_prev = 0x0;
                break;
            case 0x1:
                if (encA_prev == 0x0){encA_cw++;}
 38a:	90 91 1c 01 	lds	r25, 0x011C
 38e:	9f 5f       	subi	r25, 0xFF	; 255
 390:	90 93 1c 01 	sts	0x011C, r25
 394:	40 91 1d 01 	lds	r20, 0x011D
 398:	f4 cf       	rjmp	.-24     	; 0x382 <decode_enc+0x1ba>
                if (encA_prev == 0x3){encA_ccw++;}
                encA_prev = 0x1;
                break;
            case 0x2:
                if (encA_prev == 0x3){encA_cw++;}
 39a:	90 91 1c 01 	lds	r25, 0x011C
 39e:	9f 5f       	subi	r25, 0xFF	; 255
 3a0:	90 93 1c 01 	sts	0x011C, r25
 3a4:	40 91 1d 01 	lds	r20, 0x011D
 3a8:	75 cf       	rjmp	.-278    	; 0x294 <decode_enc+0xcc>
            if(!(encoders & 0x8)){encB_state=0x0;}
        }

        switch (encA_state){
            case 0x0:
                if (encA_prev == 0x1){encA_ccw++;}
 3aa:	40 91 1d 01 	lds	r20, 0x011D
 3ae:	4f 5f       	subi	r20, 0xFF	; 255
 3b0:	40 93 1d 01 	sts	0x011D, r20
 3b4:	90 91 1c 01 	lds	r25, 0x011C
 3b8:	29 cf       	rjmp	.-430    	; 0x20c <decode_enc+0x44>
                if (encA_prev == 0x3){encA_cw++;}
                if (encA_prev == 0x0){encA_ccw++;}
                encA_prev = 0x2;
                break;
            case 0x3:
                if (encA_prev == 0x1){encA_cw++;}
 3ba:	90 91 1c 01 	lds	r25, 0x011C
 3be:	9f 5f       	subi	r25, 0xFF	; 255
 3c0:	90 93 1c 01 	sts	0x011C, r25
 3c4:	40 91 1d 01 	lds	r20, 0x011D
 3c8:	87 cf       	rjmp	.-242    	; 0x2d8 <decode_enc+0x110>
                if (encB_prev == 0x3){encB_cw++;}
                if (encB_prev == 0x0){encB_ccw++;}
                encB_prev = 0x2;
                break;
            case 0x3:
                if (encB_prev == 0x1){encB_cw++;}
 3ca:	80 91 1b 01 	lds	r24, 0x011B
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <decode_enc+0x20c>
 3d2:	56 c0       	rjmp	.+172    	; 0x480 <decode_enc+0x2b8>
                if (encB_prev == 0x2){encB_ccw++;}
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	09 f4       	brne	.+2      	; 0x3da <decode_enc+0x212>
 3d8:	4b c0       	rjmp	.+150    	; 0x470 <decode_enc+0x2a8>
 3da:	30 91 19 01 	lds	r19, 0x0119
 3de:	20 91 1a 01 	lds	r18, 0x011A
                encB_prev = 0x3;
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	80 93 1b 01 	sts	0x011B, r24
                break;
 3e8:	8c cf       	rjmp	.-232    	; 0x302 <decode_enc+0x13a>
                if (encB_prev == 0x0){encB_cw++;}
                if (encB_prev == 0x3){encB_ccw++;}
                encB_prev = 0x1;
                break;
            case 0x2:
                if (encB_prev == 0x3){encB_cw++;}
 3ea:	80 91 1b 01 	lds	r24, 0x011B
 3ee:	83 30       	cpi	r24, 0x03	; 3
 3f0:	39 f1       	breq	.+78     	; 0x440 <decode_enc+0x278>
                if (encB_prev == 0x0){encB_ccw++;}
 3f2:	81 11       	cpse	r24, r1
 3f4:	4d c0       	rjmp	.+154    	; 0x490 <decode_enc+0x2c8>
 3f6:	20 91 1a 01 	lds	r18, 0x011A
 3fa:	2f 5f       	subi	r18, 0xFF	; 255
 3fc:	20 93 1a 01 	sts	0x011A, r18
 400:	30 91 19 01 	lds	r19, 0x0119
                encB_prev = 0x2;
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	80 93 1b 01 	sts	0x011B, r24
                break;
 40a:	7b cf       	rjmp	.-266    	; 0x302 <decode_enc+0x13a>
                break;
        }
        
        switch (encB_state){
            case 0x0:
                if (encB_prev == 0x1){encB_ccw++;}
 40c:	80 91 1b 01 	lds	r24, 0x011B
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	f1 f0       	breq	.+60     	; 0x450 <decode_enc+0x288>
                if (encB_prev == 0x2){encB_cw++;}
 414:	30 91 19 01 	lds	r19, 0x0119
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	19 f4       	brne	.+6      	; 0x422 <decode_enc+0x25a>
 41c:	3f 5f       	subi	r19, 0xFF	; 255
 41e:	30 93 19 01 	sts	0x0119, r19
 422:	20 91 1a 01 	lds	r18, 0x011A
                encB_prev = 0x0;
 426:	10 92 1b 01 	sts	0x011B, r1
                break;
 42a:	6b cf       	rjmp	.-298    	; 0x302 <decode_enc+0x13a>
            case 0x1:
                if (encB_prev == 0x0){encB_cw++;}
                if (encB_prev == 0x3){encB_ccw++;}
 42c:	83 30       	cpi	r24, 0x03	; 3
 42e:	a9 f5       	brne	.+106    	; 0x49a <decode_enc+0x2d2>
 430:	20 91 1a 01 	lds	r18, 0x011A
 434:	2f 5f       	subi	r18, 0xFF	; 255
 436:	20 93 1a 01 	sts	0x011A, r18
 43a:	30 91 19 01 	lds	r19, 0x0119
 43e:	f8 ce       	rjmp	.-528    	; 0x230 <decode_enc+0x68>
                encB_prev = 0x1;
                break;
            case 0x2:
                if (encB_prev == 0x3){encB_cw++;}
 440:	30 91 19 01 	lds	r19, 0x0119
 444:	3f 5f       	subi	r19, 0xFF	; 255
 446:	30 93 19 01 	sts	0x0119, r19
 44a:	20 91 1a 01 	lds	r18, 0x011A
 44e:	da cf       	rjmp	.-76     	; 0x404 <decode_enc+0x23c>
                break;
        }
        
        switch (encB_state){
            case 0x0:
                if (encB_prev == 0x1){encB_ccw++;}
 450:	20 91 1a 01 	lds	r18, 0x011A
 454:	2f 5f       	subi	r18, 0xFF	; 255
 456:	20 93 1a 01 	sts	0x011A, r18
 45a:	30 91 19 01 	lds	r19, 0x0119
 45e:	e3 cf       	rjmp	.-58     	; 0x426 <decode_enc+0x25e>
        }

        switch (encA_state){
            case 0x0:
                if (encA_prev == 0x1){encA_ccw++;}
                if (encA_prev == 0x2){encA_cw++;}
 460:	90 91 1c 01 	lds	r25, 0x011C
 464:	9f 5f       	subi	r25, 0xFF	; 255
 466:	90 93 1c 01 	sts	0x011C, r25
 46a:	40 91 1d 01 	lds	r20, 0x011D
 46e:	ce ce       	rjmp	.-612    	; 0x20c <decode_enc+0x44>
                if (encB_prev == 0x0){encB_ccw++;}
                encB_prev = 0x2;
                break;
            case 0x3:
                if (encB_prev == 0x1){encB_cw++;}
                if (encB_prev == 0x2){encB_ccw++;}
 470:	20 91 1a 01 	lds	r18, 0x011A
 474:	2f 5f       	subi	r18, 0xFF	; 255
 476:	20 93 1a 01 	sts	0x011A, r18
 47a:	30 91 19 01 	lds	r19, 0x0119
 47e:	b1 cf       	rjmp	.-158    	; 0x3e2 <decode_enc+0x21a>
                if (encB_prev == 0x3){encB_cw++;}
                if (encB_prev == 0x0){encB_ccw++;}
                encB_prev = 0x2;
                break;
            case 0x3:
                if (encB_prev == 0x1){encB_cw++;}
 480:	30 91 19 01 	lds	r19, 0x0119
 484:	3f 5f       	subi	r19, 0xFF	; 255
 486:	30 93 19 01 	sts	0x0119, r19
 48a:	20 91 1a 01 	lds	r18, 0x011A
 48e:	a9 cf       	rjmp	.-174    	; 0x3e2 <decode_enc+0x21a>
 490:	30 91 19 01 	lds	r19, 0x0119
 494:	20 91 1a 01 	lds	r18, 0x011A
 498:	b5 cf       	rjmp	.-150    	; 0x404 <decode_enc+0x23c>
 49a:	30 91 19 01 	lds	r19, 0x0119
 49e:	20 91 1a 01 	lds	r18, 0x011A
 4a2:	c6 ce       	rjmp	.-628    	; 0x230 <decode_enc+0x68>

000004a4 <main>:
            encB_ccw = 0;
        }
        count = count & 0x03FF;
}

uint8_t main() {
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	1f 92       	push	r1
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
    0b10001110, // F
    0b11111111, // Blank
};

void spi_init(void){
    DDRB |= 0x07;
 4ae:	87 b3       	in	r24, 0x17	; 23
 4b0:	87 60       	ori	r24, 0x07	; 7
 4b2:	87 bb       	out	0x17, r24	; 23
    SPCR |= (1<<SPE) | (1<<MSTR);
 4b4:	8d b1       	in	r24, 0x0d	; 13
 4b6:	80 65       	ori	r24, 0x50	; 80
 4b8:	8d b9       	out	0x0d, r24	; 13
    SPSR |= (1<<SPI2X);
 4ba:	70 9a       	sbi	0x0e, 0	; 14
        count = count & 0x03FF;
}

uint8_t main() {
    spi_init();
    DDRB |= (1<<PB7) | (1<<PB6) | (1<<PB5) | (1<<PB4);
 4bc:	87 b3       	in	r24, 0x17	; 23
 4be:	80 6f       	ori	r24, 0xF0	; 240
 4c0:	87 bb       	out	0x17, r24	; 23
    DDRC |= (1<<PC2) | (1<<PC1) | (1<<PC0);
 4c2:	84 b3       	in	r24, 0x14	; 20
 4c4:	87 60       	ori	r24, 0x07	; 7
 4c6:	84 bb       	out	0x14, r24	; 20
    PORTB &= ~(1<<PB7);
 4c8:	c7 98       	cbi	0x18, 7	; 24
    uint8_t encoders;
    uint8_t mode = 0x00;
 4ca:	40 e0       	ldi	r20, 0x00	; 0
    uint8_t modifier;

    while(1){

        DDRA = 0x00;
        PORTA = 0xFF;
 4cc:	88 24       	eor	r8, r8
 4ce:	8a 94       	dec	r8
        PORTC &= ~(1<<PC0);
        _delay_us(10);

        // Use button 0 to toggle +2 mode
        if (chk_buttons(0)){mode ^= 0xF0;}
 4d0:	a0 ef       	ldi	r26, 0xF0	; 240
 4d2:	9a 2e       	mov	r9, r26

        // Use button 1 to toggle +4 mode
        if (chk_buttons(1)){mode ^= 0x0F;}
 4d4:	bf e0       	ldi	r27, 0x0F	; 15
 4d6:	ab 2e       	mov	r10, r27
        // Shortcut for resetting the count
        if (chk_buttons(7)){count = 0;}

        // Shortcut for getting to the other end 
        // of the count
        if (chk_buttons(6)){count = 1020;}
 4d8:	1c ef       	ldi	r17, 0xFC	; 252
 4da:	e1 2e       	mov	r14, r17
 4dc:	13 e0       	ldi	r17, 0x03	; 3
 4de:	f1 2e       	mov	r15, r17
 4e0:	58 c0       	rjmp	.+176    	; 0x592 <main+0xee>

        switch(mode){
 4e2:	40 3f       	cpi	r20, 0xF0	; 240
 4e4:	09 f4       	brne	.+2      	; 0x4e8 <main+0x44>
 4e6:	cf c0       	rjmp	.+414    	; 0x686 <main+0x1e2>
 4e8:	4f 3f       	cpi	r20, 0xFF	; 255
 4ea:	09 f4       	brne	.+2      	; 0x4ee <main+0x4a>
                break;
            case 0xF0:
                modifier = 0x02;
                break;
            case 0xFF:
                modifier = 0x00;
 4ec:	b1 2c       	mov	r11, r1
                break;
        }

        // Disable pushbuttons
        PORTC |= (1<<PC0);
 4ee:	a8 9a       	sbi	0x15, 0	; 21


        // Send the mode indicator to the bar graph and poll the encoders
        encoders = serial_update(mode);
 4f0:	84 2f       	mov	r24, r20
 4f2:	49 83       	std	Y+1, r20	; 0x01
 4f4:	0e 94 7a 00 	call	0xf4	; 0xf4 <serial_update>

        // Decode the encoder pattern into clockwise or counter-clockwise
        // rotation and modify the count accordingly
        decode_enc(encoders,modifier);
 4f8:	6b 2d       	mov	r22, r11
 4fa:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <decode_enc>

        // Decode the count into base-10 numbers and prepare them for display
        // on the 7-segment display
        segsum(count);
 4fe:	80 91 17 01 	lds	r24, 0x0117
 502:	90 91 18 01 	lds	r25, 0x0118
 506:	0e 94 aa 00 	call	0x154	; 0x154 <segsum>

        // Set PORTA to output
        DDRA = 0xFF;
 50a:	8a ba       	out	0x1a, r8	; 26

        // Select Right-most digit
        PORTB &= ~((1<<PB6)|(1<<PB5)|(1<<PB4));
 50c:	88 b3       	in	r24, 0x18	; 24
 50e:	8f 78       	andi	r24, 0x8F	; 143
 510:	88 bb       	out	0x18, r24	; 24
        PORTA = seg_digits[segment_data[0]];
 512:	e0 91 12 01 	lds	r30, 0x0112
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	e0 50       	subi	r30, 0x00	; 0
 51a:	ff 4f       	sbci	r31, 0xFF	; 255
 51c:	80 81       	ld	r24, Z
 51e:	8b bb       	out	0x1b, r24	; 27
 520:	8f ec       	ldi	r24, 0xCF	; 207
 522:	97 e0       	ldi	r25, 0x07	; 7
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <main+0x80>
 528:	00 c0       	rjmp	.+0      	; 0x52a <main+0x86>
 52a:	00 00       	nop
        //spi_write(segment_data[0]);
        _delay_us(SHOW_TIME);

        // Select Second to right digit
        PORTB |= (1<<PB4);
 52c:	c4 9a       	sbi	0x18, 4	; 24
        PORTA = seg_digits[segment_data[1]];
 52e:	e0 91 13 01 	lds	r30, 0x0113
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	e0 50       	subi	r30, 0x00	; 0
 536:	ff 4f       	sbci	r31, 0xFF	; 255
 538:	80 81       	ld	r24, Z
 53a:	8b bb       	out	0x1b, r24	; 27
 53c:	8f ec       	ldi	r24, 0xCF	; 207
 53e:	97 e0       	ldi	r25, 0x07	; 7
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <main+0x9c>
 544:	00 c0       	rjmp	.+0      	; 0x546 <main+0xa2>
 546:	00 00       	nop
        //spi_write(segment_data[1]);
        _delay_us(SHOW_TIME);

        // Select second to left digit
        PORTB |= (1<<PB5) | (1<<PB4);
 548:	88 b3       	in	r24, 0x18	; 24
 54a:	80 63       	ori	r24, 0x30	; 48
 54c:	88 bb       	out	0x18, r24	; 24
        PORTA = seg_digits[segment_data[3]];
 54e:	e0 91 15 01 	lds	r30, 0x0115
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	e0 50       	subi	r30, 0x00	; 0
 556:	ff 4f       	sbci	r31, 0xFF	; 255
 558:	80 81       	ld	r24, Z
 55a:	8b bb       	out	0x1b, r24	; 27
 55c:	8f ec       	ldi	r24, 0xCF	; 207
 55e:	97 e0       	ldi	r25, 0x07	; 7
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <main+0xbc>
 564:	00 c0       	rjmp	.+0      	; 0x566 <main+0xc2>
 566:	00 00       	nop
        //spi_write(segment_data[3]);
        _delay_us(SHOW_TIME);

        // Select left-most digit
        PORTB &= ~((1<<PB5)|(1<<PB4));
 568:	88 b3       	in	r24, 0x18	; 24
 56a:	8f 7c       	andi	r24, 0xCF	; 207
 56c:	88 bb       	out	0x18, r24	; 24
        PORTB |= (1<<PB6);
 56e:	c6 9a       	sbi	0x18, 6	; 24
        PORTA = seg_digits[segment_data[4]];
 570:	e0 91 16 01 	lds	r30, 0x0116
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	e0 50       	subi	r30, 0x00	; 0
 578:	ff 4f       	sbci	r31, 0xFF	; 255
 57a:	80 81       	ld	r24, Z
 57c:	8b bb       	out	0x1b, r24	; 27
 57e:	8f ec       	ldi	r24, 0xCF	; 207
 580:	97 e0       	ldi	r25, 0x07	; 7
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <main+0xde>
 586:	00 c0       	rjmp	.+0      	; 0x588 <main+0xe4>
 588:	00 00       	nop
        //spi_write(segment_data[4]);
        _delay_us(SHOW_TIME);

        PORTB |= (1<<PB6) | (1<<PB5) | (1<<PB4);
 58a:	88 b3       	in	r24, 0x18	; 24
 58c:	80 67       	ori	r24, 0x70	; 112
 58e:	88 bb       	out	0x18, r24	; 24
    }
 590:	49 81       	ldd	r20, Y+1	; 0x01
    uint8_t mode = 0x00;
    uint8_t modifier;

    while(1){

        DDRA = 0x00;
 592:	1a ba       	out	0x1a, r1	; 26
        PORTA = 0xFF;
 594:	8b ba       	out	0x1b, r8	; 27
        PORTC &= ~(1<<PC0);
 596:	a8 98       	cbi	0x15, 0	; 21
 598:	25 e3       	ldi	r18, 0x35	; 53
 59a:	2a 95       	dec	r18
 59c:	f1 f7       	brne	.-4      	; 0x59a <main+0xf6>
 59e:	00 00       	nop

    // Button states
    static uint16_t state[] = {0, 0, 0, 0, 0, 0, 0, 0};

    // Check the button's state
    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000;
 5a0:	29 b3       	in	r18, 0x19	; 25
 5a2:	80 91 21 01 	lds	r24, 0x0121
 5a6:	90 91 22 01 	lds	r25, 0x0122
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	90 6e       	ori	r25, 0xE0	; 224
 5b0:	20 fb       	bst	r18, 0
 5b2:	66 24       	eor	r6, r6
 5b4:	60 f8       	bld	r6, 0
 5b6:	71 2c       	mov	r7, r1
 5b8:	86 29       	or	r24, r6
 5ba:	97 29       	or	r25, r7
 5bc:	90 93 22 01 	sts	0x0122, r25
 5c0:	80 93 21 01 	sts	0x0121, r24

    // If the button has been pressed the last 12 times it has been checked, return true
    if (state[button] == 0xF000){return 1;}
 5c4:	81 15       	cp	r24, r1
 5c6:	90 4f       	sbci	r25, 0xF0	; 240
 5c8:	09 f4       	brne	.+2      	; 0x5cc <main+0x128>
 5ca:	5b c0       	rjmp	.+182    	; 0x682 <main+0x1de>

    // Button states
    static uint16_t state[] = {0, 0, 0, 0, 0, 0, 0, 0};

    // Check the button's state
    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000;
 5cc:	29 b3       	in	r18, 0x19	; 25
 5ce:	80 91 23 01 	lds	r24, 0x0123
 5d2:	90 91 24 01 	lds	r25, 0x0124
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	90 6e       	ori	r25, 0xE0	; 224
 5dc:	21 fb       	bst	r18, 1
 5de:	00 27       	eor	r16, r16
 5e0:	00 f9       	bld	r16, 0
 5e2:	10 e0       	ldi	r17, 0x00	; 0
 5e4:	80 2b       	or	r24, r16
 5e6:	91 2b       	or	r25, r17
 5e8:	90 93 24 01 	sts	0x0124, r25
 5ec:	80 93 23 01 	sts	0x0123, r24

    // If the button has been pressed the last 12 times it has been checked, return true
    if (state[button] == 0xF000){return 1;}
 5f0:	81 15       	cp	r24, r1
 5f2:	90 4f       	sbci	r25, 0xF0	; 240
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <main+0x154>
 5f6:	43 c0       	rjmp	.+134    	; 0x67e <main+0x1da>

    // Button states
    static uint16_t state[] = {0, 0, 0, 0, 0, 0, 0, 0};

    // Check the button's state
    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000;
 5f8:	89 b3       	in	r24, 0x19	; 25
 5fa:	20 91 2f 01 	lds	r18, 0x012F
 5fe:	30 91 30 01 	lds	r19, 0x0130
 602:	22 0f       	add	r18, r18
 604:	33 1f       	adc	r19, r19
 606:	30 6e       	ori	r19, 0xE0	; 224
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	88 0f       	add	r24, r24
 60c:	89 2f       	mov	r24, r25
 60e:	88 1f       	adc	r24, r24
 610:	99 0b       	sbc	r25, r25
 612:	28 2b       	or	r18, r24
 614:	39 2b       	or	r19, r25
 616:	30 93 30 01 	sts	0x0130, r19
 61a:	20 93 2f 01 	sts	0x012F, r18

    // If the button has been pressed the last 12 times it has been checked, return true
    if (state[button] == 0xF000){return 1;}
 61e:	21 15       	cp	r18, r1
 620:	30 4f       	sbci	r19, 0xF0	; 240
 622:	41 f1       	breq	.+80     	; 0x674 <main+0x1d0>

    // Button states
    static uint16_t state[] = {0, 0, 0, 0, 0, 0, 0, 0};

    // Check the button's state
    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000;
 624:	89 b3       	in	r24, 0x19	; 25
 626:	20 91 2d 01 	lds	r18, 0x012D
 62a:	30 91 2e 01 	lds	r19, 0x012E
 62e:	22 0f       	add	r18, r18
 630:	33 1f       	adc	r19, r19
 632:	30 6e       	ori	r19, 0xE0	; 224
 634:	86 fb       	bst	r24, 6
 636:	cc 24       	eor	r12, r12
 638:	c0 f8       	bld	r12, 0
 63a:	d1 2c       	mov	r13, r1
 63c:	2c 29       	or	r18, r12
 63e:	3d 29       	or	r19, r13
 640:	30 93 2e 01 	sts	0x012E, r19
 644:	20 93 2d 01 	sts	0x012D, r18

    // If the button has been pressed the last 12 times it has been checked, return true
    if (state[button] == 0xF000){return 1;}
 648:	21 15       	cp	r18, r1
 64a:	30 4f       	sbci	r19, 0xF0	; 240
 64c:	51 f0       	breq	.+20     	; 0x662 <main+0x1be>

        // Shortcut for getting to the other end 
        // of the count
        if (chk_buttons(6)){count = 1020;}

        switch(mode){
 64e:	4f 30       	cpi	r20, 0x0F	; 15
 650:	71 f0       	breq	.+28     	; 0x66e <main+0x1ca>
 652:	40 31       	cpi	r20, 0x10	; 16
 654:	08 f0       	brcs	.+2      	; 0x658 <main+0x1b4>
 656:	45 cf       	rjmp	.-374    	; 0x4e2 <main+0x3e>
 658:	41 11       	cpse	r20, r1
 65a:	49 cf       	rjmp	.-366    	; 0x4ee <main+0x4a>
            case 0x00:
                modifier = 0x01;
 65c:	bb 24       	eor	r11, r11
 65e:	b3 94       	inc	r11
 660:	46 cf       	rjmp	.-372    	; 0x4ee <main+0x4a>
        // Shortcut for resetting the count
        if (chk_buttons(7)){count = 0;}

        // Shortcut for getting to the other end 
        // of the count
        if (chk_buttons(6)){count = 1020;}
 662:	f0 92 18 01 	sts	0x0118, r15
 666:	e0 92 17 01 	sts	0x0117, r14

        switch(mode){
 66a:	4f 30       	cpi	r20, 0x0F	; 15
 66c:	91 f7       	brne	.-28     	; 0x652 <main+0x1ae>
            case 0x00:
                modifier = 0x01;
                break;
            case 0x0F:
                modifier = 0x04;
 66e:	94 e0       	ldi	r25, 0x04	; 4
 670:	b9 2e       	mov	r11, r25
                break;
 672:	3d cf       	rjmp	.-390    	; 0x4ee <main+0x4a>

        // Use button 1 to toggle +4 mode
        if (chk_buttons(1)){mode ^= 0x0F;}

        // Shortcut for resetting the count
        if (chk_buttons(7)){count = 0;}
 674:	10 92 18 01 	sts	0x0118, r1
 678:	10 92 17 01 	sts	0x0117, r1
 67c:	d3 cf       	rjmp	.-90     	; 0x624 <main+0x180>

        // Use button 0 to toggle +2 mode
        if (chk_buttons(0)){mode ^= 0xF0;}

        // Use button 1 to toggle +4 mode
        if (chk_buttons(1)){mode ^= 0x0F;}
 67e:	4a 25       	eor	r20, r10
 680:	bb cf       	rjmp	.-138    	; 0x5f8 <main+0x154>
        PORTA = 0xFF;
        PORTC &= ~(1<<PC0);
        _delay_us(10);

        // Use button 0 to toggle +2 mode
        if (chk_buttons(0)){mode ^= 0xF0;}
 682:	49 25       	eor	r20, r9
 684:	a3 cf       	rjmp	.-186    	; 0x5cc <main+0x128>
                break;
            case 0x0F:
                modifier = 0x04;
                break;
            case 0xF0:
                modifier = 0x02;
 686:	82 e0       	ldi	r24, 0x02	; 2
 688:	b8 2e       	mov	r11, r24
                break;
 68a:	31 cf       	rjmp	.-414    	; 0x4ee <main+0x4a>

0000068c <_exit>:
 68c:	f8 94       	cli

0000068e <__stop_program>:
 68e:	ff cf       	rjmp	.-2      	; 0x68e <__stop_program>
